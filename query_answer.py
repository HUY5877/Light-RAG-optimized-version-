#这是用来评估rag的数据
test_query = [
    {
        "query": "Kilosort是什么？它解决了什么问题？",
        "expected_answers": ["Kilosort是一个计算框架，旨在解决神经科学中的峰值排序（spike sorting）问题。峰值排序是从细胞外电生理记录中提取单个神经元放电时间的过程。这是一个具有挑战性的问题，因为记录存在非平稳性（例如探针漂移）以及邻近神经元电场的密集重叠。Kilosort使用模板匹配和反卷积等算法来识别和分离脉冲信号（spikes），即使是重叠的脉冲信号也能处理，并且它包含了校正探针漂移的方法。"]
    },
    {
        "query":"相比于之前的版本，Kilosort4的主要改进是什么？" ,
        "expected_answers": ["Kilosort4报告的主要改进是其显著提升的性能，尤其是在高漂移或处理低振幅/小空间范围神经元等挑战性条件下。这主要归功于受基于图的方法启发的新聚类算法（特别是使用了模块度优化和合并树），以及模板反卷积/特征提取阶段的改进，包括背景扣除。此外，Kilosort4是完全使用Python和PyTorch实现的，这使得它更易于访问，并可能更容易进行后续开发。"]
    },
    {
        "query": "请解释Kilosort中的“漂移校正”（drift correction）概念。它从Kilosort2到Kilosort2.5是如何演变的？",
        "expected_answers": ["""漂移校正处理的是由探针相对于脑组织的移动（例如，组织松弛或动物运动）引起的记录非平稳性问题。这种移动会随着时间的推移改变记录到的脉冲波形。Kilosort2 使用了一种“漂移跟踪”（drift tracking）方法。它在线学习模板并跟踪它们随时间的变化，从而隐含地跟随漂移，而无需直接修改原始数据。这种方法需要连续的漂移，并且对于突变效果不佳。 Kilosort2.5 引入了一种独立的“漂移校正”（drift correction）方法（在Steinmetz等人，2021 / 参考文献[9]中有详细描述）。该方法在进一步处理之前直接修改原始电压数据。它估计跨通道的漂移，并在计算上将特定通道上的数据向上或向下移动，以随时间对齐波形，从而有效地稳定记录。这种直接校正方法已被所有后续版本（Kilosort 3, Kilosort4）采用。"""]
    },
    {
        "query": " Kilosort 3和4中的模板反卷积（template deconvolution）是什么？为什么背景扣除（background subtraction）很重要？" ,
        "expected_answers": ["在Kilosort 3和4中，模板反卷积是一个结合了脉冲检测和特征提取的步骤。它使用一组学习到的“模板”（平均脉冲波形）通过匹配追踪（matching pursuit）来识别预处理数据中的脉冲。这个过程迭代地找到最佳匹配模板，减去其贡献，然后重复，从而能够检测到重叠的脉冲。为每个检测到的脉冲提取的“特征”来源于此过程。背景扣除（特别是在Kilosort4的特征提取中提到，如图1i）至关重要，因为它在提取用于聚类的最终特征之前，移除了附近重叠脉冲的影响。这会产生更清晰、更像高斯分布的特征簇（如t-SNE图所示），使得下游的聚类算法更容易正确地分离它们，相比之下，没有背景扣除提取的特征会因为重叠而产生复杂的模式"]
    },
    {
        "query":"Kilosort4中基于图的聚类（graph-based clustering）是如何工作的？",
        "expected_answers" : ["""Kilosort4使用了一种新颖的基于图的聚类方法。

首先构建一个图，其中节点代表检测到的脉冲，边连接特征空间中的最近邻（通过模板反卷积提取）。

使用基于优化“模块度”（modularity）成本函数的迭代邻居重新分配算法。节点被分配给拥有最多邻居的簇，并根据簇的大小进行惩罚。这会收敛到一个初始的、通常是过度分割（over-split）的聚类结果。

为了有效地处理大量数据点，它使用了一种“基于地标”（landmark-based）的方法，只考虑一个点子集内的邻居。

然后，它使用模块度成本函数构建一个“合并树”（merging tree），以确定初始簇之间的最佳合并顺序。

最后，它遍历这棵树，根据两个标准做出合并/分割决策：a) 两个潜在子簇之间沿着回归轴的脉冲投影是否是双峰的（bimodal），以及 b) 子簇脉冲时间的互相关图（cross-correlogram）是否显示不应期（refractory period）冲突（表明它们可能属于同一个神经元）。在对所有区域进行聚类后，还会基于模板相似性和不应期进行全局合并。"""]
    },
    {
        "query" : "在哪些条件下Kilosort4显著优于Kilosort3或2.5？",
        "expected_answers": ["根据表2和图3，Kilosort4在所有条件下都表现最佳。与Kilosort3和Kilosort2.5相比，最显著的优势似乎出现在高漂移（high drift）尤其是阶跃漂移（step drift）条件下。在这些更困难的场景中（特别是阶跃漂移），KS2.5和KS3的性能显著下降，而KS4则保持了高得多的准确性，能够正确识别多得多的单元。即使在无漂移/中等漂移/快速漂移条件下，KS4也表现出略好的性能。"]
    },
    {
        "query": "对于哪些类型的电生理数据，Kilosort4（特别是其漂移校正）可能不适用？哪种替代方案可能更好？",
        "expected_answers": ["""缺乏明确固定几何结构的数据（例如，四极管 tetrodes）。

电极之间垂直间距过大的探针（文中提到 > 40 µm），因为插值可能不准确。

来自单电极的数据（如Utah阵列），尽管Kilosort在没有漂移校正的情况下可能仍可用。
对于这些情况，论文建议 Kilosort2 可能是一个更好的替代方案，因为它的“漂移跟踪”方法不需要明确的几何结构，而是直接跟踪模板的变化，尽管与带有漂移校正的KS2.5/4相比，它在突变（阶跃）漂移下的性能会下降。"""]
    },
    {
        "query": "Kilosort4聚类算法中“合并树”（merging tree）的目的是什么？",
        "expected_answers": ["Kilosort4中初始的基于图的聚类步骤（迭代邻居重新分配）倾向于“过度分割”（over-split）簇，意味着单个神经元可能被表示为多个簇。合并树提供了一种高效且有原则的方法来决定这些初始簇中的哪些应该被合并回一起。它是基于模块度成本函数构建的，根据合并能提高多少模块度（或者更确切地说，根据它们达到最优时的分辨率参数‘gamma’）来排序潜在的合并。通过从上（最通用的簇）到下遍历这棵树，算法可以使用神经科学特定的标准（投影轴的双峰性、不应期冲突）系统地评估潜在的合并，以纠正初始的过度分割，并得到最终的神经元单元集合。"]
    }

]










